defaultTasks 'clean', 'build'

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    // please checkout the gradle-swagger-plugin and build it locally
    // https://github.com/dave-ellis/gradle-swagger-plugin
    // Using gradlew swagger to generate the API documents
    /*dependencies {
		classpath group: 'com.github.gradle-swagger', name: 'gradle-swagger-plugin', version: '1.0.2-SNAPSHOT'
    }*/
}


allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
    }
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'idea'
    apply plugin: 'maven'
  //apply plugin: 'swagger'

    group = "com.acmeair.${rootProject.name}"
    version = rootProject.version
    ext{
    	springVersion = "4.1.7.RELEASE"
    	springDataVersion = "1.9.0.RELEASE"
    }
    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    dependencies {
        compile 'com.netflix.hystrix:hystrix-core:1.3.20'
        compile 'com.netflix.ribbon:ribbon-core:0.3.13'
        compile ('com.netflix.ribbon:ribbon-httpclient:0.3.13'){
			exclude group: 'com.sun.jersey'
		}
        compile ('com.netflix.karyon:karyon-core:1.0.27') {
			exclude group: 'com.sun.jersey'
		}
		// Just setup the jersey version here
		runtime 'com.sun.jersey:jersey-server:1.17.1'
		runtime 'com.sun.jersey:jersey-core:1.17.1'
		runtime 'com.sun.jersey:jersey-servlet:1.17.1'
		runtime 'com.sun.jersey:jersey-json:1.17.1'
    }
}

task wrapper(type: Wrapper) {
	gradleVersion = '1.9'
}

project(':acmeair-common') {
	dependencies {
		compile 'org.jboss.spec:jboss-javaee-6.0:1.0.0.Final'
		// unit test
		testCompile 'junit:junit:4.12'
		testCompile 'org.mockito:mockito-core:1.10.19'
		testCompile 'com.sun.jersey.jersey-test-framework:jersey-test-framework-core:1.17.1'
		// add the support of inject the HttpRequest
		testCompile 'com.sun.jersey.jersey-test-framework:jersey-test-framework-grizzly2:1.17.1'
		testCompile 'com.sun.jersey:jersey-grizzly2-servlet:1.17.1'
		testCompile 'com.sun.jersey:jersey-client:1.17.1'
	}
}

project(':acmeair-services') {
	dependencies {
		compile project(':acmeair-common')
		compile "org.springframework:spring-context:${springVersion}"
	}
}

project(':acmeair-services-astyanax') {
	dependencies {
		compile project(':acmeair-common')
		compile project(':acmeair-services')
		compile 'com.datastax.cassandra:cassandra-driver-core:1.0.5'
	}
}

project(':acmeair-services-jpa') {
	dependencies {
		compile project(':acmeair-services')
		compile 'commons-dbcp:commons-dbcp:1.4'
		compile "org.springframework.data:spring-data-jpa:${springDataVersion}"
		compile "mysql:mysql-connector-java:5.1.24"
		compile "org.hibernate:hibernate-core:4.3.11.Final"
		compile "org.hibernate:hibernate-validator:4.3.2.Final"
		compile "org.hibernate:hibernate-entitymanager:4.3.11.Final"
		compile project(':acmeair-common')
		compile 'org.slf4j:jcl-over-slf4j:1.7.2'
		// use log4j under slf4j
		compile 'org.slf4j:slf4j-log4j12:1.7.2'
		testCompile "org.springframework:spring-test:${springVersion}"
		testCompile 'com.github.springtestdbunit:spring-test-dbunit:1.2.0'
		testCompile 'org.dbunit:dbunit:2.5.0'
		testCompile 'junit:junit:4.12'
		testCompile 'com.h2database:h2:1.4.189'

	}
}

project(':acmeair-webapp') {

	dependencies {
		compile project(':acmeair-common')
		compile project(':acmeair-services')

		// spring
		runtime "org.springframework:spring-web:${springVersion}"
		runtime 'cglib:cglib:2.2.2'
		runtime 'org.aspectj:aspectjrt:1.6.8'
		runtime 'org.aspectj:aspectjweaver:1.6.8'

		// logging
		// netflix uses slf4j
		compile 'org.slf4j:slf4j-api:1.7.2'
		// spring uses jcl bridge to slf4j
		runtime 'org.slf4j:jcl-over-slf4j:1.7.2'
		// use log4j under slf4j
		runtime 'org.slf4j:slf4j-log4j12:1.7.2'

		// jersey
		runtime 'com.sun.jersey:jersey-server:1.17.1'
        runtime 'com.sun.jersey:jersey-core:1.17.1'
        runtime 'com.sun.jersey:jersey-servlet:1.17.1'
        runtime 'com.sun.jersey:jersey-json:1.17.1'

		// netflix runtime components
		runtime 'com.netflix.karyon:karyon-extensions:1.0.22'
		runtime 'com.netflix.hystrix:hystrix-metrics-event-stream:1.3.16'
		runtime ('com.netflix.ribbon:ribbon-eureka:0.3.12'){
			exclude group: 'com.sun.jersey'
		}

        // unit test
		testCompile 'junit:junit:4.12'
		testCompile 'org.mockito:mockito-core:1.10.19'
		testCompile 'com.sun.jersey.jersey-test-framework:jersey-test-framework-core:1.17.1'
		// add the support of inject the HttpRequest
		testCompile 'com.sun.jersey.jersey-test-framework:jersey-test-framework-grizzly2:1.17.1'
		testCompile 'com.sun.jersey:jersey-grizzly2-servlet:1.17.1'
		testCompile 'com.sun.jersey:jersey-client:1.17.1'

        // the dependency of swagger annotations
        compile 'com.wordnik:swagger-annotations:1.3.2'

        /*swagger {
            endPoints = ['com.acmeair.web']
            apiVersion = 'v1'
            basePath = 'http://www.example.com'
            mustacheFileRoot = "${projectDir}/templates/"
            outputTemplate = "${mustacheFileRoot}/strapdown.html.mustache"
            swaggerDirectory = "${buildDir}/site/api-docs"
            outputPath = "${buildDir}/site/swagger/strapdown.html"
        }*/
	}
}

project(':acmeair-webapp-tc7') {
	apply plugin: 'war'

	dependencies {
		compile project(':acmeair-services-astyanax')
		runtime project(':acmeair-webapp')
		// add the dependecy of javax.inject
		runtime 'javax.inject:javax.inject:1'

		// skip this dependency from spring as we're using jcl over slf4j
		providedRuntime 'commons-logging:commons-logging:1.1.1'
		// skip the JEE components that this app server provides
		providedRuntime('org.jboss.spec:jboss-javaee-6.0:1.0.0.Final'){
			transitive = false
		}
		providedRuntime 'javax.servlet:servlet-api:2.5'
		providedRuntime 'org.eclipse.jetty.orbit:javax.servlet:2.5.0.v201103041518'
		configurations {
			all*.exclude group:"org.jboss.spec", module : "jboss-javaee-6.0"
		}
	}

//	FileTree cpTree = fileTree('../patchedJars')
	war {
		from '../acmeair-webapp/src/main/webapp'
//		classpath {
//			cpTree
//		}
	}
}


project(':acmeair-webapp-jpa-tc7') {
	apply plugin: 'war'

	dependencies {
		compile project(':acmeair-services-jpa')
		runtime project(':acmeair-webapp')
		// add the dependecy of javax.inject
		runtime 'javax.inject:javax.inject:1'

		// skip this dependency from spring as we're using jcl over slf4j
		providedRuntime 'commons-logging:commons-logging:1.1.1'
		// skip the JEE components that this app server provides
		providedRuntime('org.jboss.spec:jboss-javaee-6.0:1.0.0.Final'){
			transitive = false
		}
		providedRuntime 'javax.servlet:servlet-api:2.5'
		providedRuntime 'org.eclipse.jetty.orbit:javax.servlet:2.5.0.v201103041518'
		configurations {
			all*.exclude group:"org.jboss.spec", module : "jboss-javaee-6.0"
		}
	}

//	FileTree cpTree = fileTree('../patchedJars')
	war {
		from '../acmeair-webapp/src/main/webapp'
//		classpath {
//			cpTree
//		}
	}
}


project(':acmeair-auth-service') {
	dependencies {
		compile project(':acmeair-common')
		compile project(':acmeair-services')


		// spring
		runtime "org.springframework:spring-web:${springVersion}"
		runtime 'cglib:cglib:2.2.2'
		runtime 'org.aspectj:aspectjrt:1.6.8'
		runtime 'org.aspectj:aspectjweaver:1.6.8'

		// logging
		// netflix uses slf4j
		compile 'org.slf4j:slf4j-api:1.7.2'
		// spring uses jcl bridge to slf4j
		runtime 'org.slf4j:jcl-over-slf4j:1.7.2'
		// use log4j under slf4j
		runtime 'org.slf4j:slf4j-log4j12:1.7.2'

		// jersey
		runtime 'com.sun.jersey:jersey-server:1.17.1'
		runtime 'com.sun.jersey:jersey-core:1.17.1'
		runtime 'com.sun.jersey:jersey-bundle:1.17.1'
		runtime 'com.sun.jersey:jersey-json:1.17.1'

		// netflix runtime components
		runtime 'com.netflix.karyon:karyon-extensions:1.0.22'

	}
}

project(':acmeair-auth-service-tc7') {
	apply plugin: 'war'

	dependencies {
		// add the dependecy of javax.inject
		runtime 'javax.inject:javax.inject:1'
		runtime project(':acmeair-auth-service')
		compile project(':acmeair-services-astyanax')
		// skip this dependency from spring as we're using jcl over slf4j
		providedRuntime 'commons-logging:commons-logging:1.1.1'
		// skip the JEE components that this app server provides
		providedRuntime('org.jboss.spec:jboss-javaee-6.0:1.0.0.Final'){
			transitive = false
		}
		providedRuntime 'javax.servlet:servlet-api:2.5'
		providedRuntime 'org.eclipse.jetty.orbit:javax.servlet:2.5.0.v201103041518'
		configurations {
			all*.exclude group:"org.jboss.spec", module : "jboss-javaee-6.0"
		}
	}


	war {
		from '../acmeair-auth-service/src/main/webapp'
//		classpath {
//			cpTree
//		}
	}
}

project(':acmeair-auth-service-jpa-tc7') {
	apply plugin: 'war'

	dependencies {
		// add the dependecy of javax.inject
		runtime 'javax.inject:javax.inject:1'
		runtime project(':acmeair-auth-service')
		compile project(':acmeair-services-jpa')
		// skip this dependency from spring as we're using jcl over slf4j
		providedRuntime 'commons-logging:commons-logging:1.1.1'
		// skip the JEE components that this app server provides
		providedRuntime('org.jboss.spec:jboss-javaee-6.0:1.0.0.Final'){
			transitive = false
		}
		providedRuntime 'javax.servlet:servlet-api:2.5'
		providedRuntime 'org.eclipse.jetty.orbit:javax.servlet:2.5.0.v201103041518'
		configurations {
			all*.exclude group:"org.jboss.spec", module : "jboss-javaee-6.0"
		}
	}

//	FileTree cpTree = fileTree('../patchedJars')
	war {
		from '../acmeair-auth-service/src/main/webapp'
//		classpath {
//			cpTree
//		}
	}
}

project(':acmeair-loader') {
	apply plugin: 'application'
	mainClassName = 'com.acmeair.loader.Loader'
	dependencies {
		compile project(':acmeair-services')
		compile project(':acmeair-common')
		compile project(':acmeair-services-astyanax')
		compile "org.springframework:spring-context:${springVersion}"
		configurations {
			all*.exclude group:"org.jboss.spec", module : "jboss-javaee-6.0"
		}
	}
}

project(':acmeair-loader-jpa') {
    apply plugin: 'application'
    mainClassName = 'com.acmeair.loader.Loader'
    dependencies {
        compile project(':acmeair-services')
        compile project(':acmeair-common')
        compile project(':acmeair-services-jpa')
        compile "org.springframework:spring-context:${springVersion}"
        configurations {
            all*.exclude group:"org.jboss.spec", module : "jboss-javaee-6.0"
        }
    }
}

project(':acmeair-driver') {
	dependencies {
		compile 'com.googlecode.json-simple:json-simple:1.1.1'
		compile 'org.apache.jmeter:ApacheJMeter_core:2.7'
	}
}

apply plugin: 'maven'
ext {
	nexusUrl = "http://10.128.6.39:8081/nexus"
	nexusUsername = "admin"
	nexusPassword = "admin123"
}

task zip(type: Zip) {
	from file("acmeair-auth-service-tc7/build/libs/acmeair-auth-service-tc7-${version}.war")
	from file("acmeair-auth-service-jpa-tc7/build/libs/acmeair-auth-service-jpa-tc7-${version}.war")
	from file("acmeair-loader/build/distributions/acmeair-loader-${version}.zip")
	from file("acmeair-loader-jpa/build/distributions/acmeair-loader-jpa-${version}.zip")
	from file("acmeair-webapp-jpa-tc7/build/libs/acmeair-webapp-jpa-tc7-${version}.war")
	from file("acmeair-webapp-tc7/build/libs/acmeair-webapp-tc7-${version}.war")
}

task sourcesJar(type: Zip,dependsOn:zip) {
}
artifacts {
	archives sourcesJar
}

task addTag {
	def tagCmd = "git tag -a v${version} -m ${version}"
	def pushTag = "git push origin v${version}"
	tagCmd.execute()
	pushTag.execute()
}

uploadArchives {
	repositories.mavenDeployer {
		repository(url: "${nexusUrl}/content/repositories/releases") {
			authentication(userName: nexusUsername, password: nexusPassword)
		}
		snapshotRepository(url: "${nexusUrl}/content/repositories/snapshots") {
			authentication(userName: nexusUsername, password: nexusPassword)
		}
		pom.groupId="acmeairnetflix"
	}
}

task release(dependsOn:[uploadArchives, addTag]) << {
}

/*
project(':acmeair-reporter') {
	apply plugin: 'application'
	mainClassName = 'com.acmeair.reporter.html.HtmlGenerator'
	run {
		args = ['../acmeair-driver-control/logsAndReports/organizedLogs']
		maxHeapSize "3000m"
	}
	dependencies {
		compile 'com.googlecode.charts4j:charts4j:1.3'
		compile 'commons-io:commons-io:2.4'
		compile 'org.freemarker:freemarker:2.3.19'
	}
}
*/

/*task acmeairNetflixZip(type:Zip) {
	from ('.')
	include '**'
	exclude '.metadata', '.gradle', 'acmeair-webapp', 'acmeair-auth-service'
	into 'acmeair-netflix'
	destinationDir new File('..')
	archiveName 'acmeair-net
*/
